@using Microsoft.AspNetCore.Identity
@model IEnumerable<ServiceRequestApp.Models.ServiceRequest>
@inject UserManager<ApplicationUser> UserManager
@using ServiceRequestApp.Models

@{
    ViewData["Title"] = "Service Requests";
    var currentUser = await UserManager.GetUserAsync(User);
}

<div class="container py-4">
    <!-- Header Section -->
    <div class="row align-items-center mb-5">
        <div class="col-lg-8">
            <h1 class="display-5 fw-bold text-gradient mb-2">Service Requests</h1>
            <p class="lead text-muted">Browse and manage service requests in your area</p>
        </div>
        <div class="col-lg-4 text-lg-end">
            @if (currentUser.UserType == "Requester")
            {
                <a asp-action="Create" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus me-2"></i>Create New Request
                </a>
            }
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 bg-light">
                <div class="card-body p-4">
                    <div class="row g-3 align-items-center">
                        <div class="col-md-3">
                            <label class="form-label fw-bold">
                                <i class="fas fa-filter me-2 text-primary"></i>Filter by Status
                            </label>
                            <select class="form-select" id="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="Pending">Pending</option>
                                <option value="Accepted">Accepted</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-bold">
                                <i class="fas fa-search me-2 text-primary"></i>Search
                            </label>
                            <input type="text" class="form-control" id="searchInput" placeholder="Search requests...">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-bold">
                                <i class="fas fa-sort me-2 text-primary"></i>Sort by
                            </label>
                            <select class="form-select" id="sortFilter">
                                <option value="newest">Newest First</option>
                                <option value="oldest">Oldest First</option>
                                <option value="price-high">Price: High to Low</option>
                                <option value="price-low">Price: Low to High</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-primary w-100" onclick="clearFilters()">
                                <i class="fas fa-times me-2"></i>Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Service Requests Grid -->
    <div class="d-flex justify-content-around row g-3" id="requestsContainer">
        @foreach (var item in Model)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 request-card" data-status="@item.Status.ToLower()" data-title="@item.Title.ToLower()" data-price="@(item.Budget ?? 0)">
                <div class="card h-100 shadow-sm border-0">
                    <div class="card-header bg-gradient-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0 text-white">@item.Title</h5>
                            <span class="badge @(item.Status switch {
                                "Pending" => "bg-warning",
                                "Accepted" => "bg-info",
                                "Completed" => "bg-success",
                                _ => "bg-secondary"
                            }) text-light">@item.Status</span>
                        </div>
                    </div>
                    <div class="card-body p-3">
                        <div class="d-flex align-items-center mb-2">
                            <div class="service-type-icon me-2" style="width: 30px; height: 30px;">
                                <i class="fas fa-tools text-primary" style="font-size: 0.9rem;"></i>
                            </div>
                            <div>
                                <h6 class="mb-0 text-primary fw-bold" style="font-size: 0.9rem;">@(item.Category?.Name ?? "General")</h6>
                            </div>
                        </div>
                        
                        <p class="card-text text-muted mb-2" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; font-size: 0.85rem;">@item.Description</p>
                        
                        <div class="request-details mb-2">
                            <div class="row g-1">
                                <div class="col-12">
                                    <div class="detail-item">
                                        <i class="fas fa-map-marker-alt text-danger me-1" style="font-size: 0.7rem;"></i>
                                        <small class="text-muted" title="@item.Address" style="display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden; font-size: 0.75rem;">@item.Address</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="detail-item">
                                        <i class="fas fa-money-bill-wave text-success me-1" style="font-size: 0.7rem;"></i>
                                        <small class="fw-bold text-success" style="font-size: 0.75rem;">@(item.Budget.HasValue ? $"৳{item.Budget.Value:N2}" : "TBD")</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="detail-item">
                                        <i class="fas fa-calendar text-info me-1" style="font-size: 0.7rem;"></i>
                                        <small class="text-muted" style="font-size: 0.75rem;">@(item.Deadline?.ToString("MMM dd") ?? "No deadline")</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex gap-1 flex-wrap">
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary btn-sm" style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                                <i class="fas fa-info-circle me-1"></i>Details
                            </a>

                            @if (currentUser.UserType == "Provider" && item.Status == "Pending")
                            {
                                <form asp-action="Accept" asp-route-id="@item.Id" method="post" class="d-inline">
                                    <button type="submit" class="btn btn-success btn-sm" style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                                        <i class="fas fa-check me-1"></i>Accept
                                    </button>
                                </form>
                            }

                            @if (item.Status == "Accepted" &&
                           (item.RequesterId == currentUser.Id ||
                           item.AcceptedRequest?.ProviderId == currentUser.Id))
                            {
                                   
                                
                            }

                            @if (item.Status == "Pending" && item.RequesterId == currentUser.Id)
                            {
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-warning btn-sm" style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                                    <i class="fas fa-edit me-1"></i>Edit
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger btn-sm" style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                                    <i class="fas fa-trash me-1"></i>Delete
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Empty State -->
    <div id="emptyState" class="text-center py-5" style="display: none;">
        <div class="empty-state-icon mb-4">
            <i class="fas fa-search fa-4x text-muted"></i>
        </div>
        <h4 class="text-muted mb-3">No requests found</h4>
        <p class="text-muted mb-4">Try adjusting your filters or search terms</p>
        <button class="btn btn-primary" onclick="clearFilters()">
            <i class="fas fa-refresh me-2"></i>Clear Filters
        </button>
    </div>
</div>

<style>
    .service-type-icon {
        width: 30px;
        height: 30px;
        background: rgba(37, 99, 235, 0.1);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .service-type-icon i {
        font-size: 0.9rem;
    }
    
    .detail-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }
    
    .request-card {
        transition: all 0.3s ease;
        margin-bottom: 1rem;
    }
    
    .request-card:hover {
        transform: translateY(-5px);
    }
    
    .request-card .card {
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .request-card .card-body {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    .request-card .d-flex.gap-2 {
        margin-top: auto;
    }
    
    
    
    .card {
        border-radius: 1rem;
        overflow: hidden;
    }
    
    .card-header {
        border-radius: 1rem 1rem 0 0 !important;
    }
    
    .btn-sm {
        border-radius: 0.5rem;
        font-weight: 500;
    }
    
    .empty-state-icon {
        opacity: 0.5;
    }
    
    .form-select, .form-control {
        border-radius: 0.5rem;
        border: 2px solid var(--gray-200);
        transition: all 0.3s ease;
    }
    
    .form-select:focus, .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }
    
    .filter-card {
        background: var(--gray-50);
        border: 1px solid var(--gray-200);
    }
</style>

<script>
    // Filter and search functionality
    document.addEventListener('DOMContentLoaded', function() {
        const statusFilter = document.getElementById('statusFilter');
        const searchInput = document.getElementById('searchInput');
        const sortFilter = document.getElementById('sortFilter');
        const requestsContainer = document.getElementById('requestsContainer');
        const emptyState = document.getElementById('emptyState');
        
        function filterRequests() {
            const statusValue = statusFilter.value.toLowerCase();
            const searchValue = searchInput.value.toLowerCase();
            const cards = document.querySelectorAll('.request-card');
            let visibleCount = 0;
            
            cards.forEach(card => {
                const cardStatus = card.dataset.status;
                const cardTitle = card.dataset.title;
                const cardPrice = parseFloat(card.dataset.price);
                
                let showCard = true;
                
                // Status filter
                if (statusValue && cardStatus !== statusValue) {
                    showCard = false;
                }
                
                // Search filter
                if (searchValue && !cardTitle.includes(searchValue)) {
                    showCard = false;
                }
                
                if (showCard) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Show/hide empty state
            if (visibleCount === 0) {
                requestsContainer.style.display = 'none';
                emptyState.style.display = 'block';
            } else {
                requestsContainer.style.display = 'block';
                emptyState.style.display = 'none';
            }
            
            // Sort requests
            sortRequests();
        }
        
        function sortRequests() {
            const sortValue = sortFilter.value;
            const cards = Array.from(document.querySelectorAll('.request-card'));
            const container = requestsContainer;
            
            cards.sort((a, b) => {
                switch(sortValue) {
                    case 'newest':
                        return 0; // Already in creation order
                    case 'oldest':
                        return 0; // Would need to reverse, but keeping simple
                    case 'price-high':
                        return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                    case 'price-low':
                        return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                    default:
                        return 0;
                }
            });
            
            // Re-append sorted cards
            cards.forEach(card => {
                container.appendChild(card);
            });
        }
        
        function clearFilters() {
            statusFilter.value = '';
            searchInput.value = '';
            sortFilter.value = 'newest';
            filterRequests();
        }
        
        // Event listeners
        statusFilter.addEventListener('change', filterRequests);
        searchInput.addEventListener('input', filterRequests);
        sortFilter.addEventListener('change', sortRequests);
        
        // Make clearFilters available globally
        window.clearFilters = clearFilters;
        
        // Initial filter
        filterRequests();
    });
    
    // Add loading states to form submissions
    document.addEventListener('DOMContentLoaded', function() {
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', function() {
                const submitBtn = form.querySelector('button[type="submit"]');
                if (submitBtn) {
                    const originalText = submitBtn.innerHTML;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
                    submitBtn.disabled = true;
                    
                    // Re-enable after 3 seconds (in case of errors)
                    setTimeout(() => {
                        submitBtn.innerHTML = originalText;
                        submitBtn.disabled = false;
                    }, 3000);
                }
            });
        });
    });
</script>