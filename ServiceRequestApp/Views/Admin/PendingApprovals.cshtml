@{
    ViewData["Title"] = "Pending Approvals";
}

@Html.AntiForgeryToken()

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-6 fw-bold mb-2">Pending Approvals</h1>
                    <p class="text-muted mb-0">Review and approve new provider and tasker registrations</p>
                </div>
                <div>
                    <button class="btn btn-warning me-2" onclick="resetUsersToPending()">
                        <i class="fas fa-undo me-2"></i>Reset to Pending (Testing)
                    </button>
                    <button class="btn btn-primary" onclick="refreshPendingApprovals()">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0" id="totalPending">0</h4>
                            <p class="mb-0">Total Pending</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0" id="providersPending">0</h4>
                            <p class="mb-0">Providers</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-briefcase fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0" id="taskersPending">0</h4>
                            <p class="mb-0">Taskers</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-user-cog fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0" id="businessesPending">0</h4>
                            <p class="mb-0">Businesses</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-building fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label for="userTypeFilter" class="form-label">User Type</label>
                            <select id="userTypeFilter" class="form-select" onchange="filterPendingApprovals()">
                                <option value="">All Types</option>
                                <option value="Provider">Providers</option>
                                <option value="Tasker">Taskers</option>
                                <option value="Business">Businesses</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="dateFilter" class="form-label">Registration Date</label>
                            <select id="dateFilter" class="form-select" onchange="filterPendingApprovals()">
                                <option value="">All Dates</option>
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month">This Month</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="searchFilter" class="form-label">Search</label>
                            <input type="text" id="searchFilter" class="form-control" placeholder="Search by name, email, or business name..." onkeyup="filterPendingApprovals()">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Approvals Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Pending Approvals</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="pendingApprovalsTable">
                            <thead>
                                <tr>
                                    <th>User Info</th>
                                    <th>Type</th>
                                    <th>Category</th>
                                    <th>Contact</th>
                                    <th>Registration Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="pendingApprovalsBody">
                                <!-- Data will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                    <div id="noDataMessage" class="text-center py-5" style="display: none;">
                        <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                        <h4 class="text-muted">No Pending Approvals</h4>
                        <p class="text-muted">All registrations have been reviewed.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Registration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rejectionForm">
                    <input type="hidden" id="rejectUserId">
                    <div class="mb-3">
                        <label for="rejectionReason" class="form-label">Reason for Rejection *</label>
                        <textarea id="rejectionReason" class="form-control" rows="4" placeholder="Please provide a clear reason for rejection..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Reject Registration</button>
            </div>
        </div>
    </div>
</div>

<style>
    .user-info {
        display: flex;
        align-items: center;
    }
    
    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        margin-right: 12px;
    }
    
    .user-details h6 {
        margin: 0;
        font-weight: 600;
    }
    
    .user-details small {
        color: #6c757d;
    }
    
    .badge {
        font-size: 0.75rem;
    }
    
    .action-buttons {
        display: flex;
        gap: 5px;
    }
    
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }
</style>

<script>
    let pendingApprovals = [];
    let filteredApprovals = [];

    $(document).ready(function() {
        loadPendingApprovals();
        
        // Auto-refresh every 30 seconds to catch new registrations
        setInterval(function() {
            loadPendingApprovals();
        }, 30000);
    });

    function loadPendingApprovals() {
        $.ajax({
            url: '/Admin/GetPendingApprovals',
            type: 'GET',
            success: function(response) {
                if (response.success) {
                    pendingApprovals = response.data;
                    filteredApprovals = [...pendingApprovals];
                    updateStats();
                    renderPendingApprovals();
                } else {
                    showAlert('Error', 'Failed to load pending approvals', 'error');
                }
            },
            error: function() {
                showAlert('Error', 'An error occurred while loading data', 'error');
            }
        });
    }

    function updateStats() {
        const total = pendingApprovals.length;
        const providers = pendingApprovals.filter(u => u.userType === 'Provider').length;
        const taskers = pendingApprovals.filter(u => u.userType === 'Tasker').length;
        const businesses = pendingApprovals.filter(u => u.userType === 'Business').length;

        $('#totalPending').text(total);
        $('#providersPending').text(providers);
        $('#taskersPending').text(taskers);
        $('#businessesPending').text(businesses);
    }

    function renderPendingApprovals() {
        const tbody = $('#pendingApprovalsBody');
        tbody.empty();

        if (filteredApprovals.length === 0) {
            $('#noDataMessage').show();
            return;
        }

        $('#noDataMessage').hide();

        filteredApprovals.forEach(user => {
            const row = createUserRow(user);
            tbody.append(row);
        });
    }

    function createUserRow(user) {
        const initials = (user.firstName?.charAt(0) || '') + (user.lastName?.charAt(0) || '');
        const displayName = user.shopName || `${user.firstName} ${user.lastName}`;
        const registrationDate = new Date(user.createdAt).toLocaleDateString();
        
        let userTypeBadge = '';
        switch(user.userType) {
            case 'Provider':
                userTypeBadge = '<span class="badge bg-success">Provider</span>';
                break;
            case 'Tasker':
                userTypeBadge = '<span class="badge bg-info">Tasker</span>';
                break;
            case 'Business':
                userTypeBadge = '<span class="badge bg-warning text-dark">Business</span>';
                break;
        }

        return `
            <tr>
                <td>
                    <div class="user-info">
                        <div class="user-avatar">${initials}</div>
                        <div class="user-details">
                            <h6>${displayName}</h6>
                            <small>${user.email}</small>
                        </div>
                    </div>
                </td>
                <td>${userTypeBadge}</td>
                <td>
                    <span class="badge bg-secondary">${user.categoryName}</span>
                </td>
                <td>
                    <div>
                        <small><i class="fas fa-phone me-1"></i>${user.phoneNumber}</small><br>
                        <small><i class="fas fa-envelope me-1"></i>${user.email}</small>
                    </div>
                </td>
                <td>
                    <small>${registrationDate}</small>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-success btn-sm" onclick="approveUser('${user.id}')" title="Approve">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="showRejectionModal('${user.id}')" title="Reject">
                            <i class="fas fa-times"></i>
                        </button>
                        <a class="btn btn-info btn-sm" 
                           href="${user.userType === 'Provider' ? '/Account/ProviderProfile/' + user.id : 
                                  user.userType === 'Requester' ? '/Account/RequesterProfile/' + user.id : 
                                  user.userType === 'Tasker' ? '/Account/TaskerProfile/' + user.id : '#'}" 
                           title="View Details">
                            <i class="fas fa-eye"></i>
                        </a>
                    </div>
                </td>
            </tr>
        `;
    }

    function filterPendingApprovals() {
        const userTypeFilter = $('#userTypeFilter').val();
        const dateFilter = $('#dateFilter').val();
        const searchFilter = $('#searchFilter').val().toLowerCase();

        filteredApprovals = pendingApprovals.filter(user => {
            // User type filter
            if (userTypeFilter && user.userType !== userTypeFilter) {
                return false;
            }

            // Date filter
            if (dateFilter) {
                const userDate = new Date(user.createdAt);
                const now = new Date();
                const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                
                switch(dateFilter) {
                    case 'today':
                        if (userDate < today) return false;
                        break;
                    case 'week':
                        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                        if (userDate < weekAgo) return false;
                        break;
                    case 'month':
                        const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
                        if (userDate < monthAgo) return false;
                        break;
                }
            }

            // Search filter
            if (searchFilter) {
                const searchText = `${user.firstName} ${user.lastName} ${user.email} ${user.shopName || ''}`.toLowerCase();
                if (!searchText.includes(searchFilter)) {
                    return false;
                }
            }

            return true;
        });

        renderPendingApprovals();
    }

    function approveUser(userId) {
        if (confirm('Are you sure you want to approve this user?')) {
            // Get anti-forgery token
            const token = $('input[name="__RequestVerificationToken"]').val();
            
            $.ajax({
                url: '/Admin/ApproveUser',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: { userId: userId },
                success: function(response) {
                    if (response.success) {
                        showAlert('Success', response.message, 'success');
                        loadPendingApprovals();
                    } else {
                        showAlert('Error', response.message, 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Approval error:', xhr.responseText);
                    showAlert('Error', 'An error occurred while approving the user: ' + error, 'error');
                }
            });
        }
    }

    function showRejectionModal(userId) {
        $('#rejectUserId').val(userId);
        $('#rejectionReason').val('');
        $('#rejectionModal').modal('show');
    }

    function submitRejection() {
        const userId = $('#rejectUserId').val();
        const reason = $('#rejectionReason').val();

        if (!reason.trim()) {
            showAlert('Error', 'Please provide a reason for rejection', 'error');
            return;
        }

        // Get anti-forgery token
        const token = $('input[name="__RequestVerificationToken"]').val();

        $.ajax({
            url: '/Admin/RejectUser',
            type: 'POST',
            headers: {
                'RequestVerificationToken': token,
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: { 
                userId: userId,
                reason: reason
            },
            success: function(response) {
                if (response.success) {
                    showAlert('Success', response.message, 'success');
                    $('#rejectionModal').modal('hide');
                    loadPendingApprovals();
                } else {
                    showAlert('Error', response.message, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('Rejection error:', xhr.responseText);
                showAlert('Error', 'An error occurred while rejecting the user: ' + error, 'error');
            }
        });
    }

    // viewUserDetails function removed - now using direct links to user profiles

    function refreshPendingApprovals() {
        loadPendingApprovals();
    }

    function resetUsersToPending() {
        if (confirm('This will reset all existing providers and taskers to pending status for testing. Are you sure?')) {
            // Get anti-forgery token
            const token = $('input[name="__RequestVerificationToken"]').val();
            
            $.ajax({
                url: '/Admin/ResetUsersToPending',
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'RequestVerificationToken': token
                },
                success: function(response) {
                    if (response.success) {
                        showAlert('Success', response.message, 'success');
                        loadPendingApprovals();
                    } else {
                        showAlert('Error', response.message, 'error');
                    }
                },
                error: function() {
                    showAlert('Error', 'An error occurred while resetting users', 'error');
                }
            });
        }
    }

    function showAlert(title, message, type) {
        // You can use SweetAlert2 or any other alert library here
        alert(`${title}: ${message}`);
    }
</script>

